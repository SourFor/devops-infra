- name: Copy Elasticsearch configuration template
  template:
    src: elasticsearch.yml.j2
    dest: "{{ elasticsearch_config_dir }}/elasticsearch.yml"
    owner: elasticsearch
    group: elasticsearch
    mode: '0644'


- name: "Copy config file {{ item }}"
  ansible.builtin.copy:
    src: "files/elasticsearch/configs/{{ item }}"
    dest: "{{ elasticsearch_config_dir }}/{{ item }}"
    owner: elasticsearch
    group: elasticsearch
    mode: '0664'
  loop:
    - jvm.options
    - log4j2.file.properties
    - log4j2.properties
    - role_mapping.yml
    - roles.yml
    - users
    - users_roles

- name: "Copy certs {{ item }}"
  ansible.builtin.copy:
    src: "{{ elasticsearch_certs_path }}/{{ item }}"
    dest: "{{ elasticsearch_config_dir }}/certs/{{ item }}"
    owner: root
    group: root
    mode: '0660'
  loop:
    - "{{ elasticsearch_ca_cert_name }}"
    - "{{ elasticsearch_transport_cert_name }}"

# Create first start for configure single-nide cluster
- name: Create template Elasticsearch containers
  command: >
    podman run -ti -d --name elasticsearch-{{ elasticsearch_cluster_name }}
    -u elasticsearch --replace -e "ES_JAVA_OPTS=-Xms{{es_heap_size}} -Xmx{{es_heap_size}}"
    --network {{ elk_network }} -p {{ elasticsearch_client_port }}:9200 -p {{ elasticsearch_node_port }}:9300 
    -v {{ elasticsearch_data_dir }}:/usr/share/elasticsearch/data:Z
    -v {{ elasticsearch_config_dir }}:/usr/share/elasticsearch/config:Z
    {{ elasticsearch_image }}
    bin/elasticsearch 
    -Ediscovery.type=single-node
  become: true
  # become_user: elasticsearch
  
# - name: Generate the systemd unit file
#   ansible.builtin.command: podman generate systemd --new --files --name elasticsearch-{{ elasticsearch_cluster_name }}
#   ignore_errors: true
#   args:
#     chdir: /home/elasticsearch
#   become: true
#   become_user: elasticsearch


- name: Wait for Elasticsearch to start
  uri:
    url: "{{ elk_http_protocol }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:{{ elasticsearch_client_port }}"
    return_content: yes
    status_code: [401]
    validate_certs: no
  register: elasticsearch_response
  until: elasticsearch_response.status == 401
  retries: 6
  delay: 10
  ignore_errors: true

- name: Include task list from set_password.yml
  ansible.builtin.import_tasks:
    file: set_password.yml

- name: Delete template Elasticsearch containers
  ansible.builtin.command: podman rm -f elasticsearch-{{ elasticsearch_cluster_name }}
  ignore_errors: true
  become: true
  # become_user: elasticsearch

- name: Delete template Elasticsearch network
  ansible.builtin.command: "podman network rm {{ elk_network }}"
  ignore_errors: true
  become_user: elasticsearch
  when: elk_network != 'host'

- name: Configure Elasticsearch systemd service
  template:
    src: elasticsearch.service.j2
    dest: "/usr/lib/systemd/system/elasticsearch-{{ elasticsearch_cluster_name }}.service"
  notify: Just force systemd to reread configs


# - name: Configure Elasticsearch systemd service
#   copy:
#     src: "/home/elasticsearch/container-elasticsearch-{{ elasticsearch_cluster_name }}.service"
#     dest: "/usr/lib/systemd/system/elasticsearch-{{ elasticsearch_cluster_name }}.service"
#     remote_src: true
#     owner: elasticsearch
#     group: elasticsearch


- name: Just force systemd to reread configs
  ansible.builtin.command: systemctl daemon-reload
  become: true

- name: Start and enable Elasticsearch systemd service
  systemd:
    name: elasticsearch-{{ elasticsearch_cluster_name }}.service
    state: restarted
    enabled: yes

# - name: Enable firewall rules for Elasticsearch ports
#   firewalld:
#     service: "{{ item }}"
#     permanent: true
#     state: enabled
#   loop:
#     - http
#     - https

# - name: Reload firewalld service
#   service:
#     name: firewalld
#     state: reloaded

- name: Wait for Elasticsearch to start
  uri:
    url: "{{ elk_http_protocol }}://{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}:{{ elasticsearch_client_port }}"
    return_content: yes
    status_code: [200]
    validate_certs: no
    force_basic_auth: yes
    user: "{{ elasticsearch_user }}"
    password: "{{ elasticsearch_password }}"
  register: elasticsearch_response
  until: elasticsearch_response.status == 200
  retries: 6
  delay: 10

# - name: Copy Elasticsearch index template
#   copy:
#     src: index_template.json
#     dest: /opt/elasticsearch_cluster

